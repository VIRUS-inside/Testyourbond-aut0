package net.sourceforge.htmlunit.corejs.classfile;






















































































































































































































































































































































































































































































































































































































final class SuperBlock
{
  private int index;
  




















































































































































































































































































































































































































































































































































































































  private int start;
  




















































































































































































































































































































































































































































































































































































































  private int end;
  




















































































































































































































































































































































































































































































































































































































  private int[] locals;
  




















































































































































































































































































































































































































































































































































































































  private int[] stack;
  




















































































































































































































































































































































































































































































































































































































  private boolean isInitialized;
  




















































































































































































































































































































































































































































































































































































































  private boolean isInQueue;
  




















































































































































































































































































































































































































































































































































































































  SuperBlock(int index, int start, int end, int[] initialLocals)
  {
    this.index = index;
    this.start = start;
    this.end = end;
    locals = new int[initialLocals.length];
    System.arraycopy(initialLocals, 0, locals, 0, initialLocals.length);
    stack = new int[0];
    isInitialized = false;
    isInQueue = false;
  }
  
  int getIndex() {
    return index;
  }
  
  int[] getLocals() {
    int[] copy = new int[locals.length];
    System.arraycopy(locals, 0, copy, 0, locals.length);
    return copy;
  }
  








  int[] getTrimmedLocals()
  {
    int last = locals.length - 1;
    
    while ((last >= 0) && (locals[last] == 0) && 
      (!TypeInfo.isTwoWords(locals[(last - 1)]))) {
      last--;
    }
    last++;
    
    int size = last;
    for (int i = 0; i < last; i++) {
      if (TypeInfo.isTwoWords(locals[i])) {
        size--;
      }
    }
    int[] copy = new int[size];
    int i = 0; for (int j = 0; i < size; j++) {
      copy[i] = locals[j];
      if (TypeInfo.isTwoWords(locals[j])) {
        j++;
      }
      i++;
    }
    



    return copy;
  }
  
  int[] getStack() {
    int[] copy = new int[stack.length];
    System.arraycopy(stack, 0, copy, 0, stack.length);
    return copy;
  }
  
  boolean merge(int[] locals, int localsTop, int[] stack, int stackTop, ConstantPool pool)
  {
    if (!isInitialized) {
      System.arraycopy(locals, 0, this.locals, 0, localsTop);
      this.stack = new int[stackTop];
      System.arraycopy(stack, 0, this.stack, 0, stackTop);
      isInitialized = true;
      return true; }
    if ((this.locals.length == localsTop) && (this.stack.length == stackTop))
    {
      boolean localsChanged = mergeState(this.locals, locals, localsTop, pool);
      
      boolean stackChanged = mergeState(this.stack, stack, stackTop, pool);
      
      return (localsChanged) || (stackChanged);
    }
    






    throw new IllegalArgumentException("bad merge attempt");
  }
  









  private boolean mergeState(int[] current, int[] incoming, int size, ConstantPool pool)
  {
    boolean changed = false;
    for (int i = 0; i < size; i++) {
      int currentType = current[i];
      
      current[i] = TypeInfo.merge(current[i], incoming[i], pool);
      if (currentType != current[i]) {
        changed = true;
      }
    }
    return changed;
  }
  
  int getStart() {
    return start;
  }
  
  int getEnd() {
    return end;
  }
  
  public String toString()
  {
    return "sb " + index;
  }
  
  boolean isInitialized() {
    return isInitialized;
  }
  
  void setInitialized(boolean b) {
    isInitialized = b;
  }
  
  boolean isInQueue() {
    return isInQueue;
  }
  
  void setInQueue(boolean b) {
    isInQueue = b;
  }
}
