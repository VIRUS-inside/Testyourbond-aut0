package net.sourceforge.htmlunit.corejs.javascript;

import java.util.Arrays;


































































































































































































































































































































































































































































































































































class ResolvedOverload
{
  final Class<?>[] types;
  final int index;
  
  ResolvedOverload(Object[] args, int index)
  {
    this.index = index;
    types = new Class[args.length];
    int i = 0; for (int l = args.length; i < l; i++) {
      Object arg = args[i];
      if ((arg instanceof Wrapper))
        arg = ((Wrapper)arg).unwrap();
      types[i] = (arg == null ? null : arg.getClass());
    }
  }
  
  boolean matches(Object[] args) {
    if (args.length != types.length) {
      return false;
    }
    int i = 0; for (int l = args.length; i < l; i++) {
      Object arg = args[i];
      if ((arg instanceof Wrapper))
        arg = ((Wrapper)arg).unwrap();
      if (arg == null) {
        if (types[i] != null)
          return false;
      } else if (arg.getClass() != types[i]) {
        return false;
      }
    }
    return true;
  }
  
  public boolean equals(Object other)
  {
    if (!(other instanceof ResolvedOverload)) {
      return false;
    }
    ResolvedOverload ovl = (ResolvedOverload)other;
    return (Arrays.equals(types, types)) && (index == index);
  }
  
  public int hashCode()
  {
    return Arrays.hashCode(types);
  }
}
