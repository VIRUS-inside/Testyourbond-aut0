package net.sourceforge.htmlunit.corejs.javascript.tools.debugger;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JPanel;
import javax.swing.text.BadLocationException;













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class FileHeader
  extends JPanel
  implements MouseListener
{
  private static final long serialVersionUID = -2858905404778259127L;
  private int pressLine = -1;
  


  private FileWindow fileWindow;
  



  public FileHeader(FileWindow fileWindow)
  {
    this.fileWindow = fileWindow;
    addMouseListener(this);
    update();
  }
  


  public void update()
  {
    FileTextArea textArea = fileWindow.textArea;
    Font font = textArea.getFont();
    setFont(font);
    FontMetrics metrics = getFontMetrics(font);
    int h = metrics.getHeight();
    int lineCount = textArea.getLineCount() + 1;
    String dummy = Integer.toString(lineCount);
    if (dummy.length() < 2) {
      dummy = "99";
    }
    Dimension d = new Dimension();
    width = (metrics.stringWidth(dummy) + 16);
    height = (lineCount * h + 100);
    setPreferredSize(d);
    setSize(d);
  }
  



  public void paint(Graphics g)
  {
    super.paint(g);
    FileTextArea textArea = fileWindow.textArea;
    Font font = textArea.getFont();
    g.setFont(font);
    FontMetrics metrics = getFontMetrics(font);
    Rectangle clip = g.getClipBounds();
    g.setColor(getBackground());
    g.fillRect(x, y, width, height);
    int ascent = metrics.getMaxAscent();
    int h = metrics.getHeight();
    int lineCount = textArea.getLineCount() + 1;
    String dummy = Integer.toString(lineCount);
    if (dummy.length() < 2) {
      dummy = "99";
    }
    int startLine = y / h;
    int endLine = (y + height) / h + 1;
    int width = getWidth();
    if (endLine > lineCount)
      endLine = lineCount;
    for (int i = startLine; i < endLine; i++)
    {
      int pos = -2;
      try {
        pos = textArea.getLineStartOffset(i);
      }
      catch (BadLocationException localBadLocationException) {}
      boolean isBreakPoint = fileWindow.isBreakPoint(i + 1);
      String text = Integer.toString(i + 1) + " ";
      int y = i * h;
      g.setColor(Color.blue);
      g.drawString(text, 0, y + ascent);
      int x = width - ascent;
      if (isBreakPoint) {
        g.setColor(new Color(128, 0, 0));
        int dy = y + ascent - 9;
        g.fillOval(x, dy, 9, 9);
        g.drawOval(x, dy, 8, 8);
        g.drawOval(x, dy, 9, 9);
      }
      if (pos == fileWindow.currentPos) {
        Polygon arrow = new Polygon();
        int dx = x;
        y += ascent - 10;
        int dy = y;
        arrow.addPoint(dx, dy + 3);
        arrow.addPoint(dx + 5, dy + 3);
        for (x = dx + 5; x <= dx + 10; y++) {
          arrow.addPoint(x, y);x++;
        }
        for (x = dx + 9; x >= dx + 5; y++) {
          arrow.addPoint(x, y);x--;
        }
        arrow.addPoint(dx + 5, dy + 7);
        arrow.addPoint(dx, dy + 7);
        g.setColor(Color.yellow);
        g.fillPolygon(arrow);
        g.setColor(Color.black);
        g.drawPolygon(arrow);
      }
    }
  }
  




  public void mouseEntered(MouseEvent e) {}
  




  public void mousePressed(MouseEvent e)
  {
    Font font = fileWindow.textArea.getFont();
    FontMetrics metrics = getFontMetrics(font);
    int h = metrics.getHeight();
    pressLine = (e.getY() / h);
  }
  




  public void mouseClicked(MouseEvent e) {}
  



  public void mouseExited(MouseEvent e) {}
  



  public void mouseReleased(MouseEvent e)
  {
    if ((e.getComponent() == this) && 
      ((e.getModifiers() & 0x10) != 0)) {
      int y = e.getY();
      Font font = fileWindow.textArea.getFont();
      FontMetrics metrics = getFontMetrics(font);
      int h = metrics.getHeight();
      int line = y / h;
      if (line == pressLine) {
        fileWindow.toggleBreakPoint(line + 1);
      } else {
        pressLine = -1;
      }
    }
  }
}
