package net.sourceforge.htmlunit.corejs.javascript.tools.debugger;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JScrollPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class FileWindow
  extends JInternalFrame
  implements ActionListener
{
  private static final long serialVersionUID = -6212382604952082370L;
  private SwingGui debugGui;
  private Dim.SourceInfo sourceInfo;
  FileTextArea textArea;
  private FileHeader fileHeader;
  private JScrollPane p;
  int currentPos;
  
  void load()
  {
    String url = getUrl();
    if (url != null) {
      RunProxy proxy = new RunProxy(debugGui, 2);
      fileName = url;
      text = sourceInfo.source();
      new Thread(proxy).start();
    }
  }
  


  public int getPosition(int line)
  {
    int result = -1;
    try {
      result = textArea.getLineStartOffset(line);
    }
    catch (BadLocationException localBadLocationException) {}
    return result;
  }
  


  public boolean isBreakPoint(int line)
  {
    return (sourceInfo.breakableLine(line)) && (sourceInfo.breakpoint(line));
  }
  


  public void toggleBreakPoint(int line)
  {
    if (!isBreakPoint(line)) {
      setBreakPoint(line);
    } else {
      clearBreakPoint(line);
    }
  }
  


  public void setBreakPoint(int line)
  {
    if (sourceInfo.breakableLine(line)) {
      boolean changed = sourceInfo.breakpoint(line, true);
      if (changed) {
        fileHeader.repaint();
      }
    }
  }
  


  public void clearBreakPoint(int line)
  {
    if (sourceInfo.breakableLine(line)) {
      boolean changed = sourceInfo.breakpoint(line, false);
      if (changed) {
        fileHeader.repaint();
      }
    }
  }
  


  public FileWindow(SwingGui debugGui, Dim.SourceInfo sourceInfo)
  {
    super(SwingGui.getShortName(sourceInfo.url()), true, true, true, true);
    this.debugGui = debugGui;
    this.sourceInfo = sourceInfo;
    updateToolTip();
    currentPos = -1;
    textArea = new FileTextArea(this);
    textArea.setRows(24);
    textArea.setColumns(80);
    p = new JScrollPane();
    fileHeader = new FileHeader(this);
    p.setViewportView(textArea);
    p.setRowHeaderView(fileHeader);
    setContentPane(p);
    pack();
    updateText(sourceInfo);
    textArea.select(0);
  }
  




  private void updateToolTip()
  {
    int n = getComponentCount() - 1;
    if (n > 1) {
      n = 1;
    } else if (n < 0) {
      return;
    }
    Component c = getComponent(n);
    
    if ((c != null) && ((c instanceof JComponent))) {
      ((JComponent)c).setToolTipText(getUrl());
    }
  }
  


  public String getUrl()
  {
    return sourceInfo.url();
  }
  


  public void updateText(Dim.SourceInfo sourceInfo)
  {
    this.sourceInfo = sourceInfo;
    String newText = sourceInfo.source();
    if (!textArea.getText().equals(newText)) {
      textArea.setText(newText);
      int pos = 0;
      if (currentPos != -1) {
        pos = currentPos;
      }
      textArea.select(pos);
    }
    fileHeader.update();
    fileHeader.repaint();
  }
  


  public void setPosition(int pos)
  {
    textArea.select(pos);
    currentPos = pos;
    fileHeader.repaint();
  }
  


  public void select(int start, int end)
  {
    int docEnd = textArea.getDocument().getLength();
    textArea.select(docEnd, docEnd);
    textArea.select(start, end);
  }
  



  public void dispose()
  {
    debugGui.removeWindow(this);
    super.dispose();
  }
  
  public void actionPerformed(ActionEvent e)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokevirtual 56	java/awt/event/ActionEvent:getActionCommand	()Ljava/lang/String;
    //   4: astore_2
    //   5: aload_2
    //   6: ldc 57
    //   8: invokevirtual 48	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   11: ifeq +6 -> 17
    //   14: goto +31 -> 45
    //   17: aload_2
    //   18: ldc 58
    //   20: invokevirtual 48	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   23: ifeq +13 -> 36
    //   26: aload_0
    //   27: getfield 12	net/sourceforge/htmlunit/corejs/javascript/tools/debugger/FileWindow:textArea	Lnet/sourceforge/htmlunit/corejs/javascript/tools/debugger/FileTextArea;
    //   30: invokevirtual 59	net/sourceforge/htmlunit/corejs/javascript/tools/debugger/FileTextArea:copy	()V
    //   33: goto +12 -> 45
    //   36: aload_2
    //   37: ldc 60
    //   39: invokevirtual 48	java/lang/String:equals	(Ljava/lang/Object;)Z
    //   42: ifeq +3 -> 45
    //   45: return
    // Line number table:
    //   Java source line #2281	-> byte code offset #0
    //   Java source line #2282	-> byte code offset #5
    //   Java source line #2284	-> byte code offset #17
    //   Java source line #2285	-> byte code offset #26
    //   Java source line #2286	-> byte code offset #36
    //   Java source line #2289	-> byte code offset #45
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	46	0	this	FileWindow
    //   0	46	1	e	ActionEvent
    //   4	33	2	cmd	String
  }
}
