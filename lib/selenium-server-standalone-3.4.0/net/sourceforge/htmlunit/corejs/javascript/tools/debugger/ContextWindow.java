package net.sourceforge.htmlunit.corejs.javascript.tools.debugger;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JToolBar;
import javax.swing.JViewport;












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class ContextWindow
  extends JPanel
  implements ActionListener
{
  private static final long serialVersionUID = 2306040975490228051L;
  private SwingGui debugGui;
  JComboBox context;
  List<String> toolTips;
  private JTabbedPane tabs;
  private JTabbedPane tabs2;
  private MyTreeTable thisTable;
  private MyTreeTable localsTable;
  private MyTableModel tableModel;
  private Evaluator evaluator;
  private EvalTextArea cmdLine;
  JSplitPane split;
  private boolean enabled;
  
  public ContextWindow(final SwingGui debugGui)
  {
    this.debugGui = debugGui;
    enabled = false;
    JPanel left = new JPanel();
    JToolBar t1 = new JToolBar();
    t1.setName("Variables");
    t1.setLayout(new GridLayout());
    t1.add(left);
    JPanel p1 = new JPanel();
    p1.setLayout(new GridLayout());
    JPanel p2 = new JPanel();
    p2.setLayout(new GridLayout());
    p1.add(t1);
    JLabel label = new JLabel("Context:");
    context = new JComboBox();
    context.setLightWeightPopupEnabled(false);
    
    toolTips = Collections.synchronizedList(new ArrayList());
    label.setBorder(context.getBorder());
    context.addActionListener(this);
    context.setActionCommand("ContextSwitch");
    GridBagLayout layout = new GridBagLayout();
    left.setLayout(layout);
    GridBagConstraints lc = new GridBagConstraints();
    insets.left = 5;
    anchor = 17;
    ipadx = 5;
    layout.setConstraints(label, lc);
    left.add(label);
    GridBagConstraints c = new GridBagConstraints();
    gridwidth = 0;
    fill = 2;
    anchor = 17;
    layout.setConstraints(context, c);
    left.add(context);
    tabs = new JTabbedPane(3);
    tabs.setPreferredSize(new Dimension(500, 300));
    thisTable = new MyTreeTable(new VariableModel());
    JScrollPane jsp = new JScrollPane(thisTable);
    jsp.getViewport().setViewSize(new Dimension(5, 2));
    tabs.add("this", jsp);
    localsTable = new MyTreeTable(new VariableModel());
    localsTable.setAutoResizeMode(4);
    localsTable.setPreferredSize(null);
    jsp = new JScrollPane(localsTable);
    tabs.add("Locals", jsp);
    weightx = (c.weighty = 1.0D);
    gridheight = 0;
    fill = 1;
    anchor = 17;
    layout.setConstraints(tabs, c);
    left.add(tabs);
    evaluator = new Evaluator(debugGui);
    cmdLine = new EvalTextArea(debugGui);
    
    tableModel = evaluator.tableModel;
    jsp = new JScrollPane(evaluator);
    JToolBar t2 = new JToolBar();
    t2.setName("Evaluate");
    tabs2 = new JTabbedPane(3);
    tabs2.add("Watch", jsp);
    tabs2.add("Evaluate", new JScrollPane(cmdLine));
    tabs2.setPreferredSize(new Dimension(500, 300));
    t2.setLayout(new GridLayout());
    t2.add(tabs2);
    p2.add(t2);
    evaluator.setAutoResizeMode(4);
    split = new JSplitPane(1, p1, p2);
    split.setOneTouchExpandable(true);
    SwingGui.setResizeWeight(split, 0.5D);
    setLayout(new BorderLayout());
    add(split, "Center");
    
    final JToolBar finalT1 = t1;
    final JToolBar finalT2 = t2;
    final JPanel finalP1 = p1;
    final JPanel finalP2 = p2;
    final JSplitPane finalSplit = split;
    final JPanel finalThis = this;
    
    ComponentListener clistener = new ComponentListener() {
      boolean t2Docked = true;
      
      void check(Component comp) {
        Component thisParent = finalThis.getParent();
        if (thisParent == null) {
          return;
        }
        Component parent = finalT1.getParent();
        boolean leftDocked = true;
        boolean rightDocked = true;
        boolean adjustVerticalSplit = false;
        if (parent != null) {
          if (parent != finalP1) {
            while (!(parent instanceof JFrame)) {
              parent = parent.getParent();
            }
            JFrame frame = (JFrame)parent;
            debugGui.addTopLevel("Variables", frame);
            













            if (!frame.isResizable()) {
              frame.setResizable(true);
              frame.setDefaultCloseOperation(0);
              

              final WindowListener[] l = (WindowListener[])frame.getListeners(WindowListener.class);
              frame.removeWindowListener(l[0]);
              frame.addWindowListener(new WindowAdapter()
              {
                public void windowClosing(WindowEvent e) {
                  context.hidePopup();
                  l[0].windowClosing(e);
                }
              });
            }
            
            leftDocked = false;
          } else {
            leftDocked = true;
          }
        }
        parent = finalT2.getParent();
        if (parent != null) {
          if (parent != finalP2) {
            while (!(parent instanceof JFrame)) {
              parent = parent.getParent();
            }
            JFrame frame = (JFrame)parent;
            debugGui.addTopLevel("Evaluate", frame);
            frame.setResizable(true);
            rightDocked = false;
          } else {
            rightDocked = true;
          }
        }
        if ((leftDocked) && (t2Docked) && (rightDocked) && (t2Docked))
        {
          return;
        }
        t2Docked = rightDocked;
        JSplitPane split = (JSplitPane)thisParent;
        if (leftDocked) {
          if (rightDocked) {
            finalSplit.setDividerLocation(0.5D);
          } else {
            finalSplit.setDividerLocation(1.0D);
          }
          if (adjustVerticalSplit) {
            split.setDividerLocation(0.66D);
          }
        }
        else if (rightDocked) {
          finalSplit.setDividerLocation(0.0D);
          split.setDividerLocation(0.66D);
        }
        else {
          split.setDividerLocation(1.0D);
        }
      }
      
      public void componentHidden(ComponentEvent e) {
        check(e.getComponent());
      }
      
      public void componentMoved(ComponentEvent e) {
        check(e.getComponent());
      }
      
      public void componentResized(ComponentEvent e) {
        check(e.getComponent());
      }
      
      public void componentShown(ComponentEvent e) {
        check(e.getComponent());
      }
    };
    p1.addContainerListener(new ContainerListener() {
      public void componentAdded(ContainerEvent e) {
        Component thisParent = finalThis.getParent();
        JSplitPane split = (JSplitPane)thisParent;
        if (e.getChild() == finalT1) {
          if (finalT2.getParent() == finalP2)
          {
            finalSplit.setDividerLocation(0.5D);
          }
          else {
            finalSplit.setDividerLocation(1.0D);
          }
          split.setDividerLocation(0.66D);
        }
      }
      
      public void componentRemoved(ContainerEvent e) {
        Component thisParent = finalThis.getParent();
        JSplitPane split = (JSplitPane)thisParent;
        if (e.getChild() == finalT1) {
          if (finalT2.getParent() == finalP2)
          {
            finalSplit.setDividerLocation(0.0D);
            split.setDividerLocation(0.66D);
          }
          else {
            split.setDividerLocation(1.0D);
          }
        }
      }
    });
    t1.addComponentListener(clistener);
    t2.addComponentListener(clistener);
    setEnabled(false);
  }
  



  public void setEnabled(boolean enabled)
  {
    context.setEnabled(enabled);
    thisTable.setEnabled(enabled);
    localsTable.setEnabled(enabled);
    evaluator.setEnabled(enabled);
    cmdLine.setEnabled(enabled);
  }
  


  public void disableUpdate()
  {
    enabled = false;
  }
  


  public void enableUpdate()
  {
    enabled = true;
  }
  




  public void actionPerformed(ActionEvent e)
  {
    if (!enabled)
      return;
    if (e.getActionCommand().equals("ContextSwitch")) {
      Dim.ContextData contextData = debugGui.dim.currentContextData();
      if (contextData == null) {
        return;
      }
      int frameIndex = context.getSelectedIndex();
      context.setToolTipText((String)toolTips.get(frameIndex));
      int frameCount = contextData.frameCount();
      if (frameIndex >= frameCount) {
        return;
      }
      Dim.StackFrame frame = contextData.getFrame(frameIndex);
      Object scope = frame.scope();
      Object thisObj = frame.thisObj();
      thisTable.resetTree(new VariableModel(debugGui.dim, thisObj));
      VariableModel scopeModel;
      VariableModel scopeModel; if (scope != thisObj) {
        scopeModel = new VariableModel(debugGui.dim, scope);
      } else {
        scopeModel = new VariableModel();
      }
      localsTable.resetTree(scopeModel);
      debugGui.dim.contextSwitch(frameIndex);
      debugGui.showStopLine(frame);
      tableModel.updateModel();
    }
  }
}
