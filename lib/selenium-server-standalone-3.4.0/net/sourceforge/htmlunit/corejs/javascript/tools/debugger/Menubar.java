package net.sourceforge.htmlunit.corejs.javascript.tools.debugger;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class Menubar
  extends JMenuBar
  implements ActionListener
{
  private static final long serialVersionUID = 3217170497245911461L;
  private List<JMenuItem> interruptOnlyItems = Collections.synchronizedList(new ArrayList());
  




  private List<JMenuItem> runOnlyItems = Collections.synchronizedList(new ArrayList());
  



  private SwingGui debugGui;
  



  private JMenu windowMenu;
  



  private JCheckBoxMenuItem breakOnExceptions;
  



  private JCheckBoxMenuItem breakOnEnter;
  



  private JCheckBoxMenuItem breakOnReturn;
  



  Menubar(SwingGui debugGui)
  {
    this.debugGui = debugGui;
    String[] fileItems = { "Open...", "Run...", "", "Exit" };
    String[] fileCmds = { "Open", "Load", "", "Exit" };
    char[] fileShortCuts = { '0', 'N', '\000', 'X' };
    int[] fileAccelerators = { 79, 78, 0, 81 };
    
    String[] editItems = { "Cut", "Copy", "Paste", "Go to function...", "Go to line..." };
    
    char[] editShortCuts = { 'T', 'C', 'P', 'F', 'L' };
    int[] editAccelerators = { 0, 0, 0, 0, 76 };
    String[] debugItems = { "Break", "Go", "Step Into", "Step Over", "Step Out" };
    
    char[] debugShortCuts = { 'B', 'G', 'I', 'O', 'T' };
    String[] plafItems = { "Metal", "Windows", "Motif" };
    char[] plafShortCuts = { 'M', 'W', 'F' };
    int[] debugAccelerators = { 19, 116, 122, 118, 119, 0, 0 };
    

    JMenu fileMenu = new JMenu("File");
    fileMenu.setMnemonic('F');
    JMenu editMenu = new JMenu("Edit");
    editMenu.setMnemonic('E');
    JMenu plafMenu = new JMenu("Platform");
    plafMenu.setMnemonic('P');
    JMenu debugMenu = new JMenu("Debug");
    debugMenu.setMnemonic('D');
    windowMenu = new JMenu("Window");
    windowMenu.setMnemonic('W');
    for (int i = 0; i < fileItems.length; i++) {
      if (fileItems[i].length() == 0) {
        fileMenu.addSeparator();
      } else {
        JMenuItem item = new JMenuItem(fileItems[i], fileShortCuts[i]);
        item.setActionCommand(fileCmds[i]);
        item.addActionListener(this);
        fileMenu.add(item);
        if (fileAccelerators[i] != 0) {
          KeyStroke k = KeyStroke.getKeyStroke(fileAccelerators[i], 2);
          
          item.setAccelerator(k);
        }
      }
    }
    for (int i = 0; i < editItems.length; i++) {
      JMenuItem item = new JMenuItem(editItems[i], editShortCuts[i]);
      item.addActionListener(this);
      editMenu.add(item);
      if (editAccelerators[i] != 0) {
        KeyStroke k = KeyStroke.getKeyStroke(editAccelerators[i], 2);
        
        item.setAccelerator(k);
      }
    }
    for (int i = 0; i < plafItems.length; i++) {
      JMenuItem item = new JMenuItem(plafItems[i], plafShortCuts[i]);
      item.addActionListener(this);
      plafMenu.add(item);
    }
    for (int i = 0; i < debugItems.length; i++) {
      JMenuItem item = new JMenuItem(debugItems[i], debugShortCuts[i]);
      item.addActionListener(this);
      if (debugAccelerators[i] != 0) {
        KeyStroke k = KeyStroke.getKeyStroke(debugAccelerators[i], 0);
        item.setAccelerator(k);
      }
      if (i != 0) {
        interruptOnlyItems.add(item);
      } else {
        runOnlyItems.add(item);
      }
      debugMenu.add(item);
    }
    breakOnExceptions = new JCheckBoxMenuItem("Break on Exceptions");
    breakOnExceptions.setMnemonic('X');
    breakOnExceptions.addActionListener(this);
    breakOnExceptions.setSelected(false);
    debugMenu.add(breakOnExceptions);
    
    breakOnEnter = new JCheckBoxMenuItem("Break on Function Enter");
    breakOnEnter.setMnemonic('E');
    breakOnEnter.addActionListener(this);
    breakOnEnter.setSelected(false);
    debugMenu.add(breakOnEnter);
    
    breakOnReturn = new JCheckBoxMenuItem("Break on Function Return");
    breakOnReturn.setMnemonic('R');
    breakOnReturn.addActionListener(this);
    breakOnReturn.setSelected(false);
    debugMenu.add(breakOnReturn);
    
    add(fileMenu);
    add(editMenu);
    
    add(debugMenu);
    JMenuItem item;
    windowMenu.add(item = new JMenuItem("Cascade", 65));
    item.addActionListener(this);
    windowMenu.add(item = new JMenuItem("Tile", 84));
    item.addActionListener(this);
    windowMenu.addSeparator();
    windowMenu.add(item = new JMenuItem("Console", 67));
    item.addActionListener(this);
    add(windowMenu);
    
    updateEnabled(false);
  }
  


  public JCheckBoxMenuItem getBreakOnExceptions()
  {
    return breakOnExceptions;
  }
  


  public JCheckBoxMenuItem getBreakOnEnter()
  {
    return breakOnEnter;
  }
  


  public JCheckBoxMenuItem getBreakOnReturn()
  {
    return breakOnReturn;
  }
  


  public JMenu getDebugMenu()
  {
    return getMenu(2);
  }
  




  public void actionPerformed(ActionEvent e)
  {
    String cmd = e.getActionCommand();
    String plaf_name = null;
    if (cmd.equals("Metal")) {
      plaf_name = "javax.swing.plaf.metal.MetalLookAndFeel";
    } else if (cmd.equals("Windows")) {
      plaf_name = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    } else if (cmd.equals("Motif")) {
      plaf_name = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";
    } else {
      Object source = e.getSource();
      if (source == breakOnExceptions)
      {
        debugGui.dim.setBreakOnExceptions(breakOnExceptions.isSelected());
      } else if (source == breakOnEnter) {
        debugGui.dim.setBreakOnEnter(breakOnEnter.isSelected());
      } else if (source == breakOnReturn) {
        debugGui.dim.setBreakOnReturn(breakOnReturn.isSelected());
      } else {
        debugGui.actionPerformed(e);
      }
      return;
    }
    try {
      UIManager.setLookAndFeel(plaf_name);
      SwingUtilities.updateComponentTreeUI(debugGui);
      SwingUtilities.updateComponentTreeUI(debugGui.dlg);
    }
    catch (Exception localException) {}
  }
  



  public void addFile(String url)
  {
    int count = windowMenu.getItemCount();
    
    if (count == 4) {
      windowMenu.addSeparator();
      count++;
    }
    JMenuItem lastItem = windowMenu.getItem(count - 1);
    boolean hasMoreWin = false;
    int maxWin = 5;
    if ((lastItem != null) && (lastItem.getText().equals("More Windows..."))) {
      hasMoreWin = true;
      maxWin++;
    }
    if ((!hasMoreWin) && (count - 4 == 5)) { JMenuItem item;
      windowMenu.add(item = new JMenuItem("More Windows...", 77));
      item.setActionCommand("More Windows...");
      item.addActionListener(this);
      return; }
    if (count - 4 <= maxWin) {
      if (hasMoreWin) {
        count--;
        windowMenu.remove(lastItem);
      }
      String shortName = SwingGui.getShortName(url);
      JMenuItem item;
      windowMenu.add(item = new JMenuItem((char)(48 + (count - 4)) + " " + shortName, 48 + (count - 4)));
      

      if (hasMoreWin)
        windowMenu.add(lastItem);
    } else {
      return;
    }
    JMenuItem item;
    item.setActionCommand(url);
    item.addActionListener(this);
  }
  


  public void updateEnabled(boolean interrupted)
  {
    for (int i = 0; i != interruptOnlyItems.size(); i++) {
      JMenuItem item = (JMenuItem)interruptOnlyItems.get(i);
      item.setEnabled(interrupted);
    }
    
    for (int i = 0; i != runOnlyItems.size(); i++) {
      JMenuItem item = (JMenuItem)runOnlyItems.get(i);
      item.setEnabled(!interrupted);
    }
  }
}
