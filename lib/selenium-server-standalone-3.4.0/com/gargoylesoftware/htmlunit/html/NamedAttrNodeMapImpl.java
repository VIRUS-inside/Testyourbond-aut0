package com.gargoylesoftware.htmlunit.html;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.w3c.dom.DOMException;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class NamedAttrNodeMapImpl
  implements Map<String, DomAttr>, NamedNodeMap, Serializable
{
  public static final NamedAttrNodeMapImpl EMPTY_MAP = new NamedAttrNodeMapImpl();
  
  private final Map<String, DomAttr> map_ = new LinkedHashMap();
  private final List<String> attrPositions_ = new ArrayList();
  private final DomElement domNode_;
  private final boolean caseSensitive_;
  
  private NamedAttrNodeMapImpl()
  {
    domNode_ = null;
    caseSensitive_ = true;
  }
  
  NamedAttrNodeMapImpl(DomElement domNode, boolean caseSensitive)
  {
    if (domNode == null) {
      throw new IllegalArgumentException("Provided domNode can't be null.");
    }
    domNode_ = domNode;
    caseSensitive_ = caseSensitive;
  }
  
  NamedAttrNodeMapImpl(DomElement domNode, boolean caseSensitive, Map<String, DomAttr> attributes)
  {
    this(domNode, caseSensitive);
    putAll(attributes);
  }
  



  public int getLength()
  {
    return size();
  }
  



  public DomAttr getNamedItem(String name)
  {
    return get(name);
  }
  
  private String fixName(String name) {
    if (caseSensitive_) {
      return name;
    }
    return name.toLowerCase(Locale.ROOT);
  }
  



  public Node getNamedItemNS(String namespaceURI, String localName)
  {
    if (domNode_ == null) {
      return null;
    }
    return get(domNode_.getQualifiedName(namespaceURI, fixName(localName)));
  }
  



  public Node item(int index)
  {
    if ((index < 0) || (index >= attrPositions_.size())) {
      return null;
    }
    return (Node)map_.get(attrPositions_.get(index));
  }
  


  public Node removeNamedItem(String name)
    throws DOMException
  {
    return remove(name);
  }
  



  public Node removeNamedItemNS(String namespaceURI, String localName)
  {
    if (domNode_ == null) {
      return null;
    }
    return remove(domNode_.getQualifiedName(namespaceURI, fixName(localName)));
  }
  



  public DomAttr setNamedItem(Node node)
  {
    return put(node.getLocalName(), (DomAttr)node);
  }
  


  public Node setNamedItemNS(Node node)
    throws DOMException
  {
    return put(node.getNodeName(), (DomAttr)node);
  }
  



  public DomAttr put(String key, DomAttr value)
  {
    String name = fixName(key);
    DomAttr previous = (DomAttr)map_.put(name, value);
    if (previous == null) {
      attrPositions_.add(name);
    }
    return previous;
  }
  



  public DomAttr remove(Object key)
  {
    if ((key instanceof String)) {
      String name = fixName((String)key);
      attrPositions_.remove(name);
      return (DomAttr)map_.remove(name);
    }
    return null;
  }
  



  public void clear()
  {
    attrPositions_.clear();
    map_.clear();
  }
  




  public void putAll(Map<? extends String, ? extends DomAttr> t)
  {
    for (Map.Entry<? extends String, ? extends DomAttr> entry : t.entrySet()) {
      put((String)entry.getKey(), (DomAttr)entry.getValue());
    }
  }
  



  public boolean containsKey(Object key)
  {
    if ((key instanceof String)) {
      String name = fixName((String)key);
      return map_.containsKey(name);
    }
    return false;
  }
  



  public DomAttr get(Object key)
  {
    if ((key instanceof String)) {
      String name = fixName((String)key);
      return (DomAttr)map_.get(name);
    }
    return null;
  }
  



  public boolean containsValue(Object value)
  {
    return map_.containsValue(value);
  }
  



  public Set<Map.Entry<String, DomAttr>> entrySet()
  {
    return map_.entrySet();
  }
  



  public boolean isEmpty()
  {
    return map_.isEmpty();
  }
  



  public Set<String> keySet()
  {
    return map_.keySet();
  }
  



  public int size()
  {
    return map_.size();
  }
  



  public Collection<DomAttr> values()
  {
    return map_.values();
  }
}
